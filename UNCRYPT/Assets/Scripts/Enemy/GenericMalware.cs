using System;
using BehaviourTree;
using BehaviourTree.Core;
using BehaviourTree.Core.Strategies;
using UnityEngine;
using UnityEngine.PlayerLoop;

namespace Enemy
{
    public class GenericMalware : Enemy
    {
        [SerializeField] private Animator animator;
        [SerializeField] private float attackCooldown;
        [SerializeField] private KnockBackConfig knockBackConfig;

        private static readonly int AttackTrigger = Animator.StringToHash("Attack");
        private static readonly int IsPatrolling = Animator.StringToHash("IsPatrolling");


        protected override void OnStart()
        {
            Sequence patrolSequence = new Sequence("Patrol Sequence", new Node[]
            {
                new Leaf("Patrol Animation", new ActionStrategy(() => animator.SetBool(IsPatrolling, true))),
                new Leaf("Patrol", new PatrolStrategy(this))
            });

            Sequence attackSequence = new Sequence("Attack Sequence", new Node[]
            {
                new Leaf("Wait X Seconds", new WaitStrategy(attackCooldown)),
                new Leaf("Attack", new ActionStrategy(Attack))
            });

            BehaviourTree.Core.BehaviourTree checkPlayerStatus = new BehaviourTreeBuilder("Check Player Status")
                .StartSequence("Check Player Status")
                    .If("Can View Player", () => CanViewPlayer)
                        .If("Can Attack Player", () => IsNearPlayer)
                            .Then(attackSequence)
                        .Else(patrolSequence)
                    .Else("Idle", () => animator.SetBool(IsPatrolling, false)).Build();

            BehaviourTree = new BehaviourTreeBuilder("Generic Malware")
                .StartSequence("Main Selector")
                    .If("Knockback", () => HasBeenAttacked)
                        .Then(new Leaf("Knockback", new KnockbackStrategy(this, knockBackConfig)))
                    .Else(checkPlayerStatus)
                .Build();
        }

        private void Attack()
        {
            if (IsNearPlayer)
            {
                animator.SetTrigger(AttackTrigger);
            }
        }

        protected override void OnHit(Collider col)
        {
            BehaviourTree.Interrupt();
        }
    }
}